/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.hotel.reservation.model.impl;

import com.hotel.reservation.model.Room;
import com.hotel.reservation.model.RoomModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.math.BigDecimal;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Room service. Represents a row in the &quot;Room&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>RoomModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RoomImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see RoomImpl
 * @generated
 */
@JSON(strict = true)
public class RoomModelImpl extends BaseModelImpl<Room> implements RoomModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a room model instance should use the <code>Room</code> interface instead.
	 */
	public static final String TABLE_NAME = "Room";

	public static final Object[][] TABLE_COLUMNS = {
		{"roomId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"name", Types.VARCHAR}, {"description", Types.VARCHAR},
		{"imageUrl", Types.VARCHAR}, {"maxGuests", Types.INTEGER},
		{"dailyRate", Types.DECIMAL}, {"amenities", Types.VARCHAR},
		{"status", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("roomId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("imageUrl", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("maxGuests", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("dailyRate", Types.DECIMAL);
		TABLE_COLUMNS_MAP.put("amenities", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Room (roomId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,name VARCHAR(75) null,description VARCHAR(75) null,imageUrl VARCHAR(75) null,maxGuests INTEGER,dailyRate BIGDECIMAL null,amenities VARCHAR(75) null,status BOOLEAN)";

	public static final String TABLE_SQL_DROP = "drop table Room";

	public static final String ORDER_BY_JPQL = " ORDER BY room.name ASC";

	public static final String ORDER_BY_SQL = " ORDER BY Room.name ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STATUS_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NAME_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public RoomModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _roomId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRoomId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _roomId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Room.class;
	}

	@Override
	public String getModelClassName() {
		return Room.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Room, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Room, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Room, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Room)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Room, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Room, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Room)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Room, Object>> getAttributeGetterFunctions() {
		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Room, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Room, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Room, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<Room, Object>>();

			attributeGetterFunctions.put("roomId", Room::getRoomId);
			attributeGetterFunctions.put("groupId", Room::getGroupId);
			attributeGetterFunctions.put("companyId", Room::getCompanyId);
			attributeGetterFunctions.put("userId", Room::getUserId);
			attributeGetterFunctions.put("createDate", Room::getCreateDate);
			attributeGetterFunctions.put("modifiedDate", Room::getModifiedDate);
			attributeGetterFunctions.put("name", Room::getName);
			attributeGetterFunctions.put("description", Room::getDescription);
			attributeGetterFunctions.put("imageUrl", Room::getImageUrl);
			attributeGetterFunctions.put("maxGuests", Room::getMaxGuests);
			attributeGetterFunctions.put("dailyRate", Room::getDailyRate);
			attributeGetterFunctions.put("amenities", Room::getAmenities);
			attributeGetterFunctions.put("status", Room::getStatus);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Room, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Room, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<Room, ?>>();

			attributeSetterBiConsumers.put(
				"roomId", (BiConsumer<Room, Long>)Room::setRoomId);
			attributeSetterBiConsumers.put(
				"groupId", (BiConsumer<Room, Long>)Room::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId", (BiConsumer<Room, Long>)Room::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId", (BiConsumer<Room, Long>)Room::setUserId);
			attributeSetterBiConsumers.put(
				"createDate", (BiConsumer<Room, Date>)Room::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate", (BiConsumer<Room, Date>)Room::setModifiedDate);
			attributeSetterBiConsumers.put(
				"name", (BiConsumer<Room, String>)Room::setName);
			attributeSetterBiConsumers.put(
				"description", (BiConsumer<Room, String>)Room::setDescription);
			attributeSetterBiConsumers.put(
				"imageUrl", (BiConsumer<Room, String>)Room::setImageUrl);
			attributeSetterBiConsumers.put(
				"maxGuests", (BiConsumer<Room, Integer>)Room::setMaxGuests);
			attributeSetterBiConsumers.put(
				"dailyRate", (BiConsumer<Room, BigDecimal>)Room::setDailyRate);
			attributeSetterBiConsumers.put(
				"amenities", (BiConsumer<Room, String>)Room::setAmenities);
			attributeSetterBiConsumers.put(
				"status", (BiConsumer<Room, Boolean>)Room::setStatus);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getRoomId() {
		return _roomId;
	}

	@Override
	public void setRoomId(long roomId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_roomId = roomId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description = description;
	}

	@JSON
	@Override
	public String getImageUrl() {
		if (_imageUrl == null) {
			return "";
		}
		else {
			return _imageUrl;
		}
	}

	@Override
	public void setImageUrl(String imageUrl) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_imageUrl = imageUrl;
	}

	@JSON
	@Override
	public int getMaxGuests() {
		return _maxGuests;
	}

	@Override
	public void setMaxGuests(int maxGuests) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_maxGuests = maxGuests;
	}

	@JSON
	@Override
	public BigDecimal getDailyRate() {
		return _dailyRate;
	}

	@Override
	public void setDailyRate(BigDecimal dailyRate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dailyRate = dailyRate;
	}

	@JSON
	@Override
	public String getAmenities() {
		if (_amenities == null) {
			return "";
		}
		else {
			return _amenities;
		}
	}

	@Override
	public void setAmenities(String amenities) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_amenities = amenities;
	}

	@JSON
	@Override
	public boolean getStatus() {
		return _status;
	}

	@JSON
	@Override
	public boolean isStatus() {
		return _status;
	}

	@Override
	public void setStatus(boolean status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public boolean getOriginalStatus() {
		return GetterUtil.getBoolean(
			this.<Boolean>getColumnOriginalValue("status"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Room.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Room toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Room>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RoomImpl roomImpl = new RoomImpl();

		roomImpl.setRoomId(getRoomId());
		roomImpl.setGroupId(getGroupId());
		roomImpl.setCompanyId(getCompanyId());
		roomImpl.setUserId(getUserId());
		roomImpl.setCreateDate(getCreateDate());
		roomImpl.setModifiedDate(getModifiedDate());
		roomImpl.setName(getName());
		roomImpl.setDescription(getDescription());
		roomImpl.setImageUrl(getImageUrl());
		roomImpl.setMaxGuests(getMaxGuests());
		roomImpl.setDailyRate(getDailyRate());
		roomImpl.setAmenities(getAmenities());
		roomImpl.setStatus(isStatus());

		roomImpl.resetOriginalValues();

		return roomImpl;
	}

	@Override
	public Room cloneWithOriginalValues() {
		RoomImpl roomImpl = new RoomImpl();

		roomImpl.setRoomId(this.<Long>getColumnOriginalValue("roomId"));
		roomImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		roomImpl.setCompanyId(this.<Long>getColumnOriginalValue("companyId"));
		roomImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		roomImpl.setCreateDate(this.<Date>getColumnOriginalValue("createDate"));
		roomImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		roomImpl.setName(this.<String>getColumnOriginalValue("name"));
		roomImpl.setDescription(
			this.<String>getColumnOriginalValue("description"));
		roomImpl.setImageUrl(this.<String>getColumnOriginalValue("imageUrl"));
		roomImpl.setMaxGuests(
			this.<Integer>getColumnOriginalValue("maxGuests"));
		roomImpl.setDailyRate(
			this.<BigDecimal>getColumnOriginalValue("dailyRate"));
		roomImpl.setAmenities(this.<String>getColumnOriginalValue("amenities"));
		roomImpl.setStatus(this.<Boolean>getColumnOriginalValue("status"));

		return roomImpl;
	}

	@Override
	public int compareTo(Room room) {
		int value = 0;

		value = getName().compareTo(room.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Room)) {
			return false;
		}

		Room room = (Room)object;

		long primaryKey = room.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Room> toCacheModel() {
		RoomCacheModel roomCacheModel = new RoomCacheModel();

		roomCacheModel.roomId = getRoomId();

		roomCacheModel.groupId = getGroupId();

		roomCacheModel.companyId = getCompanyId();

		roomCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			roomCacheModel.createDate = createDate.getTime();
		}
		else {
			roomCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			roomCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			roomCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		roomCacheModel.name = getName();

		String name = roomCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			roomCacheModel.name = null;
		}

		roomCacheModel.description = getDescription();

		String description = roomCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			roomCacheModel.description = null;
		}

		roomCacheModel.imageUrl = getImageUrl();

		String imageUrl = roomCacheModel.imageUrl;

		if ((imageUrl != null) && (imageUrl.length() == 0)) {
			roomCacheModel.imageUrl = null;
		}

		roomCacheModel.maxGuests = getMaxGuests();

		roomCacheModel.dailyRate = getDailyRate();

		roomCacheModel.amenities = getAmenities();

		String amenities = roomCacheModel.amenities;

		if ((amenities != null) && (amenities.length() == 0)) {
			roomCacheModel.amenities = null;
		}

		roomCacheModel.status = isStatus();

		return roomCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Room, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Room, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Room, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Room)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Room>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Room.class, ModelWrapper.class);

	}

	private long _roomId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _name;
	private String _description;
	private String _imageUrl;
	private int _maxGuests;
	private BigDecimal _dailyRate;
	private String _amenities;
	private boolean _status;

	public <T> T getColumnValue(String columnName) {
		Function<Room, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Room)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("roomId", _roomId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("description", _description);
		_columnOriginalValues.put("imageUrl", _imageUrl);
		_columnOriginalValues.put("maxGuests", _maxGuests);
		_columnOriginalValues.put("dailyRate", _dailyRate);
		_columnOriginalValues.put("amenities", _amenities);
		_columnOriginalValues.put("status", _status);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("roomId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("createDate", 16L);

		columnBitmasks.put("modifiedDate", 32L);

		columnBitmasks.put("name", 64L);

		columnBitmasks.put("description", 128L);

		columnBitmasks.put("imageUrl", 256L);

		columnBitmasks.put("maxGuests", 512L);

		columnBitmasks.put("dailyRate", 1024L);

		columnBitmasks.put("amenities", 2048L);

		columnBitmasks.put("status", 4096L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Room _escapedModel;

}