/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.hotel.reservation.model.impl;

import com.hotel.reservation.model.Reservation;
import com.hotel.reservation.model.ReservationModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.math.BigDecimal;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Reservation service. Represents a row in the &quot;Reservation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ReservationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ReservationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ReservationImpl
 * @generated
 */
@JSON(strict = true)
public class ReservationModelImpl
	extends BaseModelImpl<Reservation> implements ReservationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a reservation model instance should use the <code>Reservation</code> interface instead.
	 */
	public static final String TABLE_NAME = "Reservation";

	public static final Object[][] TABLE_COLUMNS = {
		{"reservationId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"roomId", Types.BIGINT}, {"guestName", Types.VARCHAR},
		{"guestEmail", Types.VARCHAR}, {"checkInDate", Types.TIMESTAMP},
		{"checkOutDate", Types.TIMESTAMP}, {"totalAmount", Types.DECIMAL},
		{"status", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("reservationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("roomId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("guestName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("guestEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("checkInDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("checkOutDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("totalAmount", Types.DECIMAL);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Reservation (reservationId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,roomId LONG,guestName VARCHAR(75) null,guestEmail VARCHAR(75) null,checkInDate DATE null,checkOutDate DATE null,totalAmount BIGDECIMAL null,status INTEGER)";

	public static final String TABLE_SQL_DROP = "drop table Reservation";

	public static final String ORDER_BY_JPQL =
		" ORDER BY reservation.createDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Reservation.createDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ROOMID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STATUS_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public ReservationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _reservationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setReservationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _reservationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Reservation.class;
	}

	@Override
	public String getModelClassName() {
		return Reservation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Reservation, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Reservation, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Reservation, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((Reservation)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Reservation, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Reservation, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Reservation)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Reservation, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Reservation, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Reservation, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Reservation, Object>>
				attributeGetterFunctions =
					new LinkedHashMap<String, Function<Reservation, Object>>();

			attributeGetterFunctions.put(
				"reservationId", Reservation::getReservationId);
			attributeGetterFunctions.put("groupId", Reservation::getGroupId);
			attributeGetterFunctions.put(
				"companyId", Reservation::getCompanyId);
			attributeGetterFunctions.put("userId", Reservation::getUserId);
			attributeGetterFunctions.put(
				"createDate", Reservation::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", Reservation::getModifiedDate);
			attributeGetterFunctions.put("roomId", Reservation::getRoomId);
			attributeGetterFunctions.put(
				"guestName", Reservation::getGuestName);
			attributeGetterFunctions.put(
				"guestEmail", Reservation::getGuestEmail);
			attributeGetterFunctions.put(
				"checkInDate", Reservation::getCheckInDate);
			attributeGetterFunctions.put(
				"checkOutDate", Reservation::getCheckOutDate);
			attributeGetterFunctions.put(
				"totalAmount", Reservation::getTotalAmount);
			attributeGetterFunctions.put("status", Reservation::getStatus);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Reservation, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Reservation, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<Reservation, ?>>();

			attributeSetterBiConsumers.put(
				"reservationId",
				(BiConsumer<Reservation, Long>)Reservation::setReservationId);
			attributeSetterBiConsumers.put(
				"groupId",
				(BiConsumer<Reservation, Long>)Reservation::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId",
				(BiConsumer<Reservation, Long>)Reservation::setCompanyId);
			attributeSetterBiConsumers.put(
				"userId",
				(BiConsumer<Reservation, Long>)Reservation::setUserId);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<Reservation, Date>)Reservation::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<Reservation, Date>)Reservation::setModifiedDate);
			attributeSetterBiConsumers.put(
				"roomId",
				(BiConsumer<Reservation, Long>)Reservation::setRoomId);
			attributeSetterBiConsumers.put(
				"guestName",
				(BiConsumer<Reservation, String>)Reservation::setGuestName);
			attributeSetterBiConsumers.put(
				"guestEmail",
				(BiConsumer<Reservation, String>)Reservation::setGuestEmail);
			attributeSetterBiConsumers.put(
				"checkInDate",
				(BiConsumer<Reservation, Date>)Reservation::setCheckInDate);
			attributeSetterBiConsumers.put(
				"checkOutDate",
				(BiConsumer<Reservation, Date>)Reservation::setCheckOutDate);
			attributeSetterBiConsumers.put(
				"totalAmount",
				(BiConsumer<Reservation, BigDecimal>)
					Reservation::setTotalAmount);
			attributeSetterBiConsumers.put(
				"status",
				(BiConsumer<Reservation, Integer>)Reservation::setStatus);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getReservationId() {
		return _reservationId;
	}

	@Override
	public void setReservationId(long reservationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reservationId = reservationId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getRoomId() {
		return _roomId;
	}

	@Override
	public void setRoomId(long roomId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_roomId = roomId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalRoomId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("roomId"));
	}

	@JSON
	@Override
	public String getGuestName() {
		if (_guestName == null) {
			return "";
		}
		else {
			return _guestName;
		}
	}

	@Override
	public void setGuestName(String guestName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_guestName = guestName;
	}

	@JSON
	@Override
	public String getGuestEmail() {
		if (_guestEmail == null) {
			return "";
		}
		else {
			return _guestEmail;
		}
	}

	@Override
	public void setGuestEmail(String guestEmail) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_guestEmail = guestEmail;
	}

	@JSON
	@Override
	public Date getCheckInDate() {
		return _checkInDate;
	}

	@Override
	public void setCheckInDate(Date checkInDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_checkInDate = checkInDate;
	}

	@JSON
	@Override
	public Date getCheckOutDate() {
		return _checkOutDate;
	}

	@Override
	public void setCheckOutDate(Date checkOutDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_checkOutDate = checkOutDate;
	}

	@JSON
	@Override
	public BigDecimal getTotalAmount() {
		return _totalAmount;
	}

	@Override
	public void setTotalAmount(BigDecimal totalAmount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_totalAmount = totalAmount;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public int getOriginalStatus() {
		return GetterUtil.getInteger(
			this.<Integer>getColumnOriginalValue("status"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Reservation.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Reservation toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Reservation>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ReservationImpl reservationImpl = new ReservationImpl();

		reservationImpl.setReservationId(getReservationId());
		reservationImpl.setGroupId(getGroupId());
		reservationImpl.setCompanyId(getCompanyId());
		reservationImpl.setUserId(getUserId());
		reservationImpl.setCreateDate(getCreateDate());
		reservationImpl.setModifiedDate(getModifiedDate());
		reservationImpl.setRoomId(getRoomId());
		reservationImpl.setGuestName(getGuestName());
		reservationImpl.setGuestEmail(getGuestEmail());
		reservationImpl.setCheckInDate(getCheckInDate());
		reservationImpl.setCheckOutDate(getCheckOutDate());
		reservationImpl.setTotalAmount(getTotalAmount());
		reservationImpl.setStatus(getStatus());

		reservationImpl.resetOriginalValues();

		return reservationImpl;
	}

	@Override
	public Reservation cloneWithOriginalValues() {
		ReservationImpl reservationImpl = new ReservationImpl();

		reservationImpl.setReservationId(
			this.<Long>getColumnOriginalValue("reservationId"));
		reservationImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		reservationImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		reservationImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		reservationImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		reservationImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		reservationImpl.setRoomId(this.<Long>getColumnOriginalValue("roomId"));
		reservationImpl.setGuestName(
			this.<String>getColumnOriginalValue("guestName"));
		reservationImpl.setGuestEmail(
			this.<String>getColumnOriginalValue("guestEmail"));
		reservationImpl.setCheckInDate(
			this.<Date>getColumnOriginalValue("checkInDate"));
		reservationImpl.setCheckOutDate(
			this.<Date>getColumnOriginalValue("checkOutDate"));
		reservationImpl.setTotalAmount(
			this.<BigDecimal>getColumnOriginalValue("totalAmount"));
		reservationImpl.setStatus(
			this.<Integer>getColumnOriginalValue("status"));

		return reservationImpl;
	}

	@Override
	public int compareTo(Reservation reservation) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), reservation.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Reservation)) {
			return false;
		}

		Reservation reservation = (Reservation)object;

		long primaryKey = reservation.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Reservation> toCacheModel() {
		ReservationCacheModel reservationCacheModel =
			new ReservationCacheModel();

		reservationCacheModel.reservationId = getReservationId();

		reservationCacheModel.groupId = getGroupId();

		reservationCacheModel.companyId = getCompanyId();

		reservationCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			reservationCacheModel.createDate = createDate.getTime();
		}
		else {
			reservationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			reservationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			reservationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		reservationCacheModel.roomId = getRoomId();

		reservationCacheModel.guestName = getGuestName();

		String guestName = reservationCacheModel.guestName;

		if ((guestName != null) && (guestName.length() == 0)) {
			reservationCacheModel.guestName = null;
		}

		reservationCacheModel.guestEmail = getGuestEmail();

		String guestEmail = reservationCacheModel.guestEmail;

		if ((guestEmail != null) && (guestEmail.length() == 0)) {
			reservationCacheModel.guestEmail = null;
		}

		Date checkInDate = getCheckInDate();

		if (checkInDate != null) {
			reservationCacheModel.checkInDate = checkInDate.getTime();
		}
		else {
			reservationCacheModel.checkInDate = Long.MIN_VALUE;
		}

		Date checkOutDate = getCheckOutDate();

		if (checkOutDate != null) {
			reservationCacheModel.checkOutDate = checkOutDate.getTime();
		}
		else {
			reservationCacheModel.checkOutDate = Long.MIN_VALUE;
		}

		reservationCacheModel.totalAmount = getTotalAmount();

		reservationCacheModel.status = getStatus();

		return reservationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Reservation, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Reservation, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Reservation, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Reservation)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Reservation>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Reservation.class, ModelWrapper.class);

	}

	private long _reservationId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _roomId;
	private String _guestName;
	private String _guestEmail;
	private Date _checkInDate;
	private Date _checkOutDate;
	private BigDecimal _totalAmount;
	private int _status;

	public <T> T getColumnValue(String columnName) {
		Function<Reservation, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Reservation)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("reservationId", _reservationId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("roomId", _roomId);
		_columnOriginalValues.put("guestName", _guestName);
		_columnOriginalValues.put("guestEmail", _guestEmail);
		_columnOriginalValues.put("checkInDate", _checkInDate);
		_columnOriginalValues.put("checkOutDate", _checkOutDate);
		_columnOriginalValues.put("totalAmount", _totalAmount);
		_columnOriginalValues.put("status", _status);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("reservationId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("createDate", 16L);

		columnBitmasks.put("modifiedDate", 32L);

		columnBitmasks.put("roomId", 64L);

		columnBitmasks.put("guestName", 128L);

		columnBitmasks.put("guestEmail", 256L);

		columnBitmasks.put("checkInDate", 512L);

		columnBitmasks.put("checkOutDate", 1024L);

		columnBitmasks.put("totalAmount", 2048L);

		columnBitmasks.put("status", 4096L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Reservation _escapedModel;

}